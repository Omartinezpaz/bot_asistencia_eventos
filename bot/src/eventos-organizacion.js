const { Markup } = require('telegraf');
const { Organizacion, Participante, OrganizacionAdmin, Evento, Asistencia } = require('./database');
const { Op } = require('sequelize');

// Funci√≥n para iniciar el proceso de creaci√≥n de un evento para una organizaci√≥n
const iniciarCreacionEvento = async (ctx, organizationId) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    // Verificar si el usuario es administrador de la organizaci√≥n
    const { verificarAdminOrganizacion } = require('./organizacion-commands');
    const esAdmin = await verificarAdminOrganizacion(telegramId, organizationId);
    
    if (!esAdmin) {
      return ctx.replyWithMarkdown(
        `‚ùå *Acceso denegado*\n\n` +
        `Solo los administradores pueden crear eventos para esta organizaci√≥n.`
      );
    }
    
    // Obtener informaci√≥n de la organizaci√≥n
    const organizacion = await Organizacion.findByPk(organizationId);
    if (!organizacion) {
      return ctx.replyWithMarkdown(
        `‚ùå *Error*\n\n` +
        `No se encontr√≥ la organizaci√≥n con ID ${organizationId}.`
      );
    }
    
    // Inicializar la sesi√≥n si no existe
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // Iniciar el proceso de creaci√≥n
    ctx.session.creandoEvento = true;
    ctx.session.eventoStep = 'nombre';
    ctx.session.organizationId = organizationId;
    ctx.session.nuevoEvento = { organization_id: organizationId };
    
    await ctx.replyWithMarkdown(
      `üóìÔ∏è *Creaci√≥n de nuevo evento para ${organizacion.name}*\n\n` +
      `Por favor, ingresa el nombre del evento:`
    );
  } catch (error) {
    console.error('Error al iniciar creaci√≥n de evento:', error);
    await ctx.reply(
      'Ocurri√≥ un error al iniciar la creaci√≥n del evento. Por favor, intenta nuevamente m√°s tarde.',
      Markup.inlineKeyboard([
        Markup.button.callback('üîô Volver', 'action_organizaciones'),
        Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
      ])
    );
  }
};

// Funci√≥n para manejar las respuestas durante el proceso de creaci√≥n de evento
const handleEventoResponse = async (ctx) => {
  try {
    // Inicializar la sesi√≥n si no existe
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // Si no hay un proceso de creaci√≥n activo, ignorar el mensaje
    if (!ctx.session.creandoEvento || !ctx.session.eventoStep) {
      return;
    }
    
    const texto = ctx.message.text.trim();
    
    // Procesamiento seg√∫n el paso actual
    switch (ctx.session.eventoStep) {
      // Paso 1: Nombre
      case 'nombre':
        if (texto.length < 3 || texto.length > 100) {
          await ctx.reply('El nombre debe tener entre 3 y 100 caracteres. Por favor, intenta nuevamente:');
          return;
        }
        
        ctx.session.nuevoEvento.name = texto;
        ctx.session.eventoStep = 'descripcion';
        
        await ctx.replyWithMarkdown(
          `‚úÖ *Nombre registrado:* ${texto}\n\n` +
          `Ahora, ingresa una descripci√≥n para el evento (opcional, puedes enviar "-" para omitir):`
        );
        break;
        
      // Paso 2: Descripci√≥n
      case 'descripcion':
        if (texto !== '-') {
          ctx.session.nuevoEvento.description = texto;
        }
        
        ctx.session.eventoStep = 'fecha';
        
        await ctx.replyWithMarkdown(
          `‚úÖ *Descripci√≥n registrada*\n\n` +
          `Ahora, ingresa la fecha y hora del evento en formato DD/MM/YYYY HH:MM\n` +
          `Ejemplo: 25/12/2023 15:30`
        );
        break;
        
      // Paso 3: Fecha
      case 'fecha':
        // Validar formato de fecha
        const fechaRegex = /^(\d{1,2})\/(\d{1,2})\/(\d{4}) (\d{1,2}):(\d{1,2})$/;
        const match = texto.match(fechaRegex);
        
        if (!match) {
          await ctx.reply('El formato de fecha es incorrecto. Por favor, usa el formato DD/MM/YYYY HH:MM (ejemplo: 25/12/2023 15:30):');
          return;
        }
        
        const [, dia, mes, anio, hora, minuto] = match;
        const fecha = new Date(anio, mes - 1, dia, hora, minuto);
        
        // Validar que la fecha sea futura
        if (fecha <= new Date()) {
          await ctx.reply('La fecha debe ser futura. Por favor, ingresa una fecha posterior a la actual:');
          return;
        }
        
        ctx.session.nuevoEvento.date = fecha;
        ctx.session.eventoStep = 'ubicacion';
        
        await ctx.replyWithMarkdown(
          `‚úÖ *Fecha registrada:* ${fecha.toLocaleString()}\n\n` +
          `Ahora, ingresa la ubicaci√≥n del evento:`
        );
        break;
        
      // Paso 4: Ubicaci√≥n
      case 'ubicacion':
        if (texto.length < 3 || texto.length > 200) {
          await ctx.reply('La ubicaci√≥n debe tener entre 3 y 200 caracteres. Por favor, intenta nuevamente:');
          return;
        }
        
        ctx.session.nuevoEvento.location = texto;
        ctx.session.eventoStep = 'notificaciones';
        
        await ctx.replyWithMarkdown(
          `‚úÖ *Ubicaci√≥n registrada*\n\n` +
          `¬øDeseas habilitar notificaciones autom√°ticas para este evento?\n` +
          `Responde "si" o "no":`
        );
        break;
        
      // Paso 5: Notificaciones
      case 'notificaciones':
        const respuesta = texto.toLowerCase();
        
        if (respuesta !== 'si' && respuesta !== 'no') {
          await ctx.reply('Por favor, responde "si" o "no":');
          return;
        }
        
        ctx.session.nuevoEvento.notification_enabled = (respuesta === 'si');
        
        if (respuesta === 'si') {
          ctx.session.eventoStep = 'horas_notificacion';
          
          await ctx.replyWithMarkdown(
            `‚úÖ *Notificaciones habilitadas*\n\n` +
            `¬øCu√°ntas horas antes del evento deseas que se env√≠en las notificaciones?\n` +
            `Ingresa un n√∫mero entre 1 y 72:`
          );
        } else {
          // Si no hay notificaciones, pasar directamente a guardar el evento
          ctx.session.nuevoEvento.notification_hours_before = 24; // Valor por defecto
          await guardarEvento(ctx);
        }
        break;
        
      // Paso 6: Horas de notificaci√≥n
      case 'horas_notificacion':
        const horas = parseInt(texto);
        
        if (isNaN(horas) || horas < 1 || horas > 72) {
          await ctx.reply('Por favor, ingresa un n√∫mero v√°lido entre 1 y 72:');
          return;
        }
        
        ctx.session.nuevoEvento.notification_hours_before = horas;
        
        // Guardar el evento
        await guardarEvento(ctx);
        break;
        
      default:
        // Estado desconocido, reiniciar proceso
        delete ctx.session.creandoEvento;
        delete ctx.session.eventoStep;
        delete ctx.session.nuevoEvento;
        delete ctx.session.organizationId;
        await ctx.reply('Ocurri√≥ un error en el proceso de creaci√≥n. Por favor, intenta nuevamente.');
    }
  } catch (error) {
    console.error('Error en procesamiento de respuesta de evento:', error);
    await ctx.reply('Ocurri√≥ un error al procesar tu respuesta. Por favor, intenta nuevamente.');
    
    // Limpiar la sesi√≥n en caso de error
    if (ctx.session) {
      delete ctx.session.creandoEvento;
      delete ctx.session.eventoStep;
      delete ctx.session.nuevoEvento;
      delete ctx.session.organizationId;
    }
  }
};

// Funci√≥n auxiliar para guardar el evento en la base de datos
const guardarEvento = async (ctx) => {
  try {
    // Crear el evento en la base de datos
    const nuevoEvento = await Evento.create({
      name: ctx.session.nuevoEvento.name,
      description: ctx.session.nuevoEvento.description || '',
      date: ctx.session.nuevoEvento.date,
      location: ctx.session.nuevoEvento.location,
      active: true,
      notification_enabled: ctx.session.nuevoEvento.notification_enabled,
      notification_hours_before: ctx.session.nuevoEvento.notification_hours_before,
      organization_id: ctx.session.organizationId
    });
    
    // Obtener informaci√≥n de la organizaci√≥n
    const organizacion = await Organizacion.findByPk(ctx.session.organizationId);
    
    // Programar notificaciones si est√°n habilitadas
    if (nuevoEvento.notification_enabled) {
      try {
        const NotificationService = require('./services/notification-service');
        const notificationService = new NotificationService(ctx.telegram);
        await notificationService.scheduleAutomaticNotifications(nuevoEvento.id);
      } catch (notifError) {
        console.error('Error al programar notificaciones:', notifError);
      }
    }
    
    await ctx.replyWithMarkdown(
      `üéâ *¬°Evento creado exitosamente!*\n\n` +
      `*Nombre:* ${nuevoEvento.name}\n` +
      `*Fecha:* ${nuevoEvento.date.toLocaleString()}\n` +
      `*Ubicaci√≥n:* ${nuevoEvento.location}\n` +
      `*Organizaci√≥n:* ${organizacion.name}\n` +
      `*Notificaciones:* ${nuevoEvento.notification_enabled ? 'Habilitadas' : 'Deshabilitadas'}\n\n` +
      `El evento ha sido registrado correctamente y est√° listo para recibir asistentes.`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üîô Ver eventos de la organizaci√≥n', `org_events_${ctx.session.organizationId}`)],
        [Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')]
      ])
    );
    
    // Limpiar la sesi√≥n
    delete ctx.session.creandoEvento;
    delete ctx.session.eventoStep;
    delete ctx.session.nuevoEvento;
    delete ctx.session.organizationId;
  } catch (error) {
    console.error('Error al guardar evento:', error);
    await ctx.reply('Ocurri√≥ un error al crear el evento. Por favor, intenta nuevamente m√°s tarde.');
    
    // Limpiar la sesi√≥n en caso de error
    if (ctx.session) {
      delete ctx.session.creandoEvento;
      delete ctx.session.eventoStep;
      delete ctx.session.nuevoEvento;
      delete ctx.session.organizationId;
    }
  }
};

// Funci√≥n para mostrar eventos filtrados por organizaci√≥n
const mostrarEventosPorOrganizacion = async (ctx, organizationId) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    // Verificar si el usuario est√° registrado
    const participante = await Participante.findOne({ 
      where: { telegramId } 
    });
    
    if (!participante) {
      return ctx.replyWithMarkdown(
        `‚ùå *No est√°s registrado*\n\n` +
        `Para ver los eventos disponibles, primero debes registrarte.`,
        Markup.inlineKeyboard([
          Markup.button.callback('‚úÖ Registrarme ahora', 'action_register'),
          Markup.button.callback('üè† Volver al men√∫', 'action_main_menu')
        ])
      );
    }
    
    // Verificar que la organizaci√≥n existe
    const organizacion = await Organizacion.findByPk(organizationId);
    if (!organizacion) {
      return ctx.replyWithMarkdown(
        `‚ùå *Organizaci√≥n no encontrada*\n\n` +
        `No se encontr√≥ la organizaci√≥n con ID ${organizationId}.`,
        Markup.inlineKeyboard([
          Markup.button.callback('üîô Volver', 'action_organizaciones'),
          Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
        ])
      );
    }
    
    // Buscar eventos activos de la organizaci√≥n
    const eventos = await Evento.findAll({ 
      where: { 
        active: true,
        organization_id: organizationId
      },
      order: [['date', 'ASC']]
    });
    
    if (eventos.length === 0) {
      return ctx.replyWithMarkdown(
        `‚ÑπÔ∏è *No hay eventos disponibles para ${organizacion.name}*\n\n` +
        `No se encontraron eventos activos para esta organizaci√≥n.`,
        Markup.inlineKeyboard([
          Markup.button.callback('üîô Volver', 'action_mi_organizacion'),
          Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
        ])
      );
    }
    
    // Construir mensaje con la lista de eventos
    let mensaje = `üìÜ *Eventos de ${organizacion.name}*\n\n`;
    
    // Botones para cada evento
    const botonesEventos = [];
    
    for (const evento of eventos) {
      const fecha = new Date(evento.date).toLocaleDateString('es-ES', {
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      // Verificar si el usuario ya registr√≥ asistencia a este evento
      const asistencia = await Asistencia.findOne({
        where: {
          participantid: participante.id,
          eventid: evento.id
        }
      });
      
      const estadoAsistencia = asistencia 
        ? '‚úÖ *Asistencia registrada*' 
        : '‚è≥ *Pendiente*';
      
      mensaje += `*${evento.name}*\n` +
                 `üìù ${evento.description}\n` +
                 `üóìÔ∏è ${fecha}\n` +
                 `üìç ${evento.location}\n` +
                 `üìä Estado: ${estadoAsistencia}\n\n`;
      
      // A√±adir bot√≥n para registrar asistencia si a√∫n no lo ha hecho
      if (!asistencia) {
        botonesEventos.push([
          Markup.button.callback(`‚úÖ Asistir a ${evento.name}`, `event_${evento.id}`)
        ]);
      }
    }
    
    // Verificar si el usuario es administrador para mostrar opci√≥n de crear evento
    const { verificarAdminOrganizacion } = require('./organizacion-commands');
    const esAdmin = await verificarAdminOrganizacion(telegramId, organizationId);
    
    if (esAdmin) {
      botonesEventos.push([
        Markup.button.callback('‚ûï Crear nuevo evento', `create_event_${organizationId}`)
      ]);
    }
    
    // A√±adir botones de navegaci√≥n
    botonesEventos.push([
      Markup.button.callback('üîô Volver', 'action_mi_organizacion'),
      Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
    ]);
    
    await ctx.replyWithMarkdown(
      mensaje,
      Markup.inlineKeyboard(botonesEventos)
    );
  } catch (error) {
    console.error('Error al mostrar eventos por organizaci√≥n:', error);
    await ctx.reply(
      'Ocurri√≥ un error al consultar los eventos. Por favor, intenta nuevamente m√°s tarde.',
      Markup.inlineKeyboard([
        Markup.button.callback('üîÑ Intentar nuevamente', `org_events_${organizationId}`),
        Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
      ])
    );
  }
};

// Comando para ver eventos de mi organizaci√≥n
const misEventosCommand = async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    // Buscar el participante
    const participante = await Participante.findOne({ 
      where: { telegramId } 
    });
    
    if (!participante) {
      return ctx.replyWithMarkdown(
        `‚ùå *No est√°s registrado*\n\n` +
        `Para ver los eventos de tu organizaci√≥n, primero debes registrarte.`,
        Markup.inlineKeyboard([
          Markup.button.callback('‚úÖ Registrarme ahora', 'action_register'),
          Markup.button.callback('üè† Volver al men√∫', 'action_main_menu')
        ])
      );
    }
    
    // Verificar si pertenece a una organizaci√≥n
    if (!participante.organization_id) {
      return ctx.replyWithMarkdown(
        `‚ÑπÔ∏è *No perteneces a ninguna organizaci√≥n*\n\n` +
        `Contacta al administrador del sistema para que te asigne a una organizaci√≥n.`,
        Markup.inlineKeyboard([
          Markup.button.callback('üè† Volver al men√∫', 'action_main_menu')
        ])
      );
    }
    
    // Mostrar eventos de la organizaci√≥n
    return mostrarEventosPorOrganizacion(ctx, participante.organization_id);
  } catch (error) {
    console.error('Error en comando mis_eventos:', error);
    await ctx.reply(
      'Ocurri√≥ un error al consultar los eventos de tu organizaci√≥n. Por favor, intenta nuevamente m√°s tarde.',
      Markup.inlineKeyboard([
        Markup.button.callback('üîÑ Intentar nuevamente', 'action_mis_eventos'),
        Markup.button.callback('üè† Men√∫ principal', 'action_main_menu')
      ])
    );
  }
};

// Exportar las funciones
module.exports = {
  iniciarCreacionEvento,
  handleEventoResponse,
  mostrarEventosPorOrganizacion,
  misEventosCommand
}; 